---
title: "Sesi√≥n 1: Introducci√≥n a R y Estad√≠stica Descriptiva (I)"
subtitle: "Taller de M√©todos y T√©cnicas de Investigaci√≥n I [BORRADOR]"
date: "2025-10-21"
format:
  html:
    code-fold: false
    code-tools: true
    toc: true
    toc-depth: 3
---

## Objetivos de la sesi√≥n

Al finalizar esta sesi√≥n ser√°s capaz de:

- Navegar en la interfaz de RStudio
- Obtener conocimientos b√°sicos sobre R y su l√≥gica de programaci√≥n
- Crear y manipular objetos b√°sicos en R (vectores, dataframes)
- Importar datos, cargar paquetes, crear funciones de usuario
- Calcular medidas de tendencia central
- Crear tablas de frecuencia simples y de contingencia

---

## 1. Introducci√≥n a R y RStudio

### ¬øQu√© es R?

R es un lenguaje de programaci√≥n especializado en an√°lisis estad√≠stico y visualizaci√≥n de datos. Es:

- **Gratuito y de c√≥digo abierto**
- Se ha consolidado en las √∫ltimas d√©cadas como una herramienta de primer nivel para el an√°lisis estad√≠stico y programaci√≥n ([Fern√°ndez-Avil√©s y Montero, 2024](https://cdr-book.github.io/index.html))
- **Potente** para an√°lisis estad√≠sticos complejos
- **Vers√°til** con miles de paquetes disponibles
- **Reproducible**: tu an√°lisis queda documentado en c√≥digo :)

### La interfaz de RStudio

RStudio tiene 4 paneles principales:

1. **Editor** (arriba izquierda): Donde escribes tu c√≥digo en scripts
2. **Consola** (abajo izquierda): Donde se ejecuta el c√≥digo y ves resultados
3. **Environment** (arriba derecha): Muestra tus objetos/datos cargados
4. **Files/Plots/Help** (abajo derecha): Archivos, gr√°ficos, ayuda

Estos paneles se pueden modificar a comodidad, as√≠ como el theme del IDE, el tama√±o y fuente de la letra y c√≥digo, etc. Lo importante no es s√≥lo que aprendas a usar las herramientas que nos entrega RStudio, sino que tambi√©n lo hagas una herramienta propia para usar R de la manera m√°s c√≥moda posible. Al final, como R es un *lenguaje* de programaci√≥n, cada quien puede hablarlo como quiera, con sus ma√±as y pr√°cticas. 

::: {.callout-tip}
## Consejo
Siempre trabaja con **scripts** (archivos .R o .qmd) en lugar de escribir directo en la consola. As√≠ tu trabajo queda guardado y es reproducible.
:::

---

## 2. Conceptos b√°sicos de R

R, ante todo, es "un sistema para **computaci√≥n estad√≠stica**: software de **an√°lisis de datos** y **lenguaje de programaci√≥n**" ([Cano en Fern√°ndez-Avil√©s y Montero, 2024](https://cdr-book.github.io/ch-110003.html)). Es ampliamente utilizado en investigaci√≥n y docencia, pero tambi√©n ha tomado un lugar importante en la industria y el servicio p√∫blico. 

R naci√≥ como una adaptaci√≥n (en clave software libre y bajo la l√≥gica de programaci√≥n reproducible) del lenguaje S, complement√°ndolo con un excelente soporte para el uso estad√≠stico ([Wickham y Grolemund, 2023](https://es.r4ds.hadley.nz/01-intro.html)). R tiene una l√≥gica de programaci√≥n llamada Programaci√≥n Orientada a Objetos (OOP, por sus cifras en ingl√©s: *object-oriented programming*), el cual permite un polimorfismo muy √∫til y versatil para programaci√≥n estad√≠stica y que se relaciona con la *encapsulaci√≥n* de objetos ([Wickham, 2019](https://adv-r.hadley.nz/introduction.html)). M√°s all√° de tecnicismos, veremos todo esto en el curso, con ejemplos aplicados a sus investigaciones del Mag√≠ster.   

### Preparaci√≥n

```{r}
#| label: setup
#| message: false
#| warning: false

# Cargar librer√≠as necesarias
library(tidyverse)  # Para manipulaci√≥n de datos
library(psych)      # Para estad√≠stica descriptiva
library(sjmisc)     # Para explorar datos

# Configuraci√≥n
options(scipen = 999)  # Evitar notaci√≥n cient√≠fica
```

### Operaciones b√°sicas

R funciona como una calculadora avanzada:

```{r}
#| label: operaciones-basicas

# Operaciones aritm√©ticas
5 + 3
10 - 2
4 * 6
20 / 4
2^3  # Potencia

# R respeta el orden de operaciones
(5 + 3) * 2
```

### Crear objetos

En R guardamos informaci√≥n en **objetos** usando `<-`:

```{r}
#| label: crear-objetos

# Crear un objeto num√©rico
edad <- 25
edad

# Crear un vector (secuencia de valores)
edades <- c(23, 25, 28, 30, 22, 27)
edades

# Operaciones con vectores
mean(edades)    # Promedio
length(edades)  # Largo del vector
```

::: {.callout-note}
## Nota importante
Los nombres de objetos:
- Pueden contener letras, n√∫meros, `.` y `_`
- NO pueden empezar con n√∫meros
- R distingue entre may√∫sculas y min√∫sculas (`edad ‚â† Edad`), lo que se suele conocer como un lenguaje *key-sensitive*
:::

#### Crear objetos: vectores y matrices

Guardar objetos tambi√©n nos permite hacer operaciones matem√°ticas m√°s complejas, por ejemplo para el uso de una calculadora de algebra lineal. Tambi√©n se pueden hacer simulaciones, con una distribuci√≥n deseada, para hacer m√°s interesante nuestras operaciones. Veamos primero la creaci√≥n de objetos y luego operaciones m√°s complejas

```{r algebra-lineal-objetos, collapse=TRUE}
#| label: algebra-lineal-objetos

# a) Creaci√≥n de un vector de n√∫meros naturales del 1 al 8
vector1 <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 25, 44, 36, 20, 50, 88)
vector1

# b) Creaci√≥n de un vector con n√∫meros reales comprendidos entre 1 y 6
set.seed(123)
vector2 <- runif(60, 1, 6)
vector2

# c) Creaci√≥n de un vector con n√∫meros que provienen de una distribuci√≥n normal
vector3 <- rnorm(30, 0, 2)
vector3

# d) Creaci√≥n de un vector con caracteres (letras)
vector4 <- c("Lima", "Ucayali", "Loreto", "San Juan", "Pucallpa")
vector4

# e) Creaci√≥n de un vector que combine n√∫meros y texto
vector5 <- c("rojo", 3, "Azul", 7, "morado", 10)
vector5

#OTRO CASOS CON VECTORES
#a) Crea un vector con los primeros 20 n√∫meros pares.
vector1 <- seq(2, 40, by = 2)
vector1

#b) Simular 50 valores entre 5 y 15, pero solo n√∫meros enteros (valores repetidos).
vector2 <- sample(5:15, 50, replace = TRUE)
vector2

# Simular 50 valores entre 5 y 150, pero solo n√∫meros enteros (valores no repetidos).
vector2 <- sample(5:150, 50, replace = FALSE)
vector2
# Crear un vector con categor√≠as de satisfacci√≥n (Baja, Media, Alta) y convi√©rtelo en 
#factor ordenado.
vector3 <- factor(sample(c("Baja", "Media", "Alta"), 30, replace = TRUE), 
                  levels = c("Baja", "Media", "Alta"), 
                  ordered = TRUE)
vector3

# Generar un vector con los primeros 15 valores de una progresi√≥n geom√©trica de raz√≥n 3.
vector4 <- 2*(3/11)^(0:14)
vector4

# Generar 100 valores de un proceso AR(1):
#Xt=0.7Xt-1+et donde et~N(0,1)
set.seed(123)
vector5 <- numeric(100)
vector5[1] <- rnorm(1)
for (t in 2:100) {
  vector5[t] <- 0.7 * vector5[t-1] + rnorm(1)
}
vector5

#--Graficar la serie de tiempo
plot.ts(vector5, col="#7F000D", main="Proceso AR(1)")

```

¬øY si quisieramos operaciones con vectores? Hagamos un ejercicio. Sean los vectores $A$ y $B$, ambos con la misma cantidad de n√∫meros aleatorios. El vector $A$ contiene datos que provienen de una distribuci√≥n chi-cuadrada con 3 grados de libertad (gl), mientras que el vector $B$ contiene datos que provienen de una distribuci√≥n uniforme definida en el intervalo $[3, 5]$. Entonces, hallemos con R la soluci√≥n a los siguientes c√°lculos: 

1. $2A+5B$

2. $\sin(A)+\cos(B)‚àí\tan(A+B)$

3. $\sqrt[3]{A} + \exp(B) - 4B^2$

4. $\log(A+1)+B^3-10 \sqrt{B}$

```{r algebra-lineal-operaciones, collapse=TRUE}
#| label: algebra-lineal-objetos-operaciones

# Definimos objetos para la creaci√≥n de los objetos seg√∫n instrucciones
n=80
A<-rchisq(n,3) # Distribuci√≥n Chi-Cuadrada con 3 gl
B<-runif(n,3,5) # Distribuci√≥n uniforme [3,5]

# Hallar los siguientes c√°lculos:
#1) 2A+5B
R1 <- 2*A + 5*B
R1

#2) sin(A)+cos(B)‚àítan(A+B)
R2 <- sin(A) + cos(B) - tan(A + B)
R2

#3) raiz_c√∫bica(A) + exp(B) - 4B^2
R3 <- A^(1/3) + exp(B) - 4*B^2
R3

#4) log(A+1)+B^3-10raiz(B)
R4 <- log(A + 1) + B^3 - 10*sqrt(B)
R4

```

¬°¬°¬ø¬ø¬øY matrices??!! Podemos hacerlo de distintas maneras: 

```{r algebra-matricial, collapse=TRUE}
#| label: algebra-matricial

# 1Ô∏è‚É£ Declaraci√≥n de Matrices en R (Forma Manual))
A <- matrix(c(6,5,4,1.2,6,4,7,7,8,2.5,1.15,6,4,5,7,3), nrow=4, byrow=TRUE)
A

B <- matrix(c(5, sqrt(7), exp(2), 7, -1/7, 6), nrow=2, byrow=TRUE)
B



#2Ô∏è‚É£ Declaraci√≥n de Matrices Aleatoriass
A <- matrix(rnorm(36), nrow=6)  # 6√ó6 con distribuci√≥n normal est√°ndar
A

B <- matrix(runif(25, 7, 20), nrow=5)  # 5√ó5 con distribuci√≥n uniforme en [7,20]
B

C <- diag(rnorm(16,6,1.75), nrow=4)  # 4√ó4 con valores en la diagonal
C


D <- diag(1, nrow=5)  # Matriz identidad de orden 5
D

E <- diag(0, nrow=5)  # Matriz nula de orden 5
E

G <- diag(rnorm(5))  # Matriz diagonal
G[upper.tri(G)] <- rnorm(5)  # Convertir en matriz triangular superior
G

G <- diag(rnorm(5))
G[lower.tri(G)] <- rnorm(5)  # Convertir en matriz triangular inferior
G

```


Con ello, podemos hacer las siguiente operaciones: 

```{r algebra-matricial-operaciones, collapse=TRUE}
#| label: algebra-matricial-operaciones

#3Ô∏è‚É£ Transpuesta de una Matriz
A <- matrix(rnorm(36,3,0.2), nrow=9)
A
t(A)  # Transpuesta

#4Ô∏è‚É£ Traza de una Matriz
A <- matrix(rnorm(25), nrow=5)
A
traza <- sum(diag(A))
paste("La traza es:", traza)


#5Ô∏è‚É£ Suma de Matrices
A <- matrix(rnorm(30), nrow=6)
B <- matrix(rnorm(30,5,2), nrow=6)
A + B  # Suma de matrices

#6Ô∏è‚É£ Producto de un Escalar por una Matriz
C <- matrix(rnorm(40,6,1), nrow=8)
sqrt(7) * C  # Producto con un escalar

A <- matrix(runif(42), nrow=7)
B <- matrix(runif(42,4,6), nrow=7)
P <- 2.35 * A + log(13) * B  # Combinaci√≥n lineal de matrices
P

#7Ô∏è‚É£ Multiplicaci√≥n de Matrices
A <- matrix(runif(30,1,3), nrow=5)  # 5√ó6
B <- matrix(runif(30,2,9), nrow=6)  # 6√ó5
A %*% B  # Producto de matrices
(1/2*A) %*% (exp(3)*B)
(1/17*B) %*% (4*A)

#8Ô∏è‚É£ Determinante de una Matriz
A <- matrix(runif(36,1,10), nrow=6)
A
det(A)  # Determinante de la matriz

#9Ô∏è‚É£ Rango de una Matriz
A <- matrix(runif(25,10,36), nrow=5)
A
qr(A)$rank  # Rango de la matriz


B <- matrix(runif(28,9,100), nrow=7)
B
qr(B)$rank


#üîü Inversa de una Matriz
A <- matrix(runif(36,0,10), nrow=6)
A
inv <- solve(A)  # Inversa de la matriz
inv
round(A %*% inv)  # Verificaci√≥n: debe aproximarse a la matriz identidad

```


Incluso podr√≠amos calcular MCO matricialmente^[La expresi√≥n $\hat{\beta} = (X^\top X)^{-1} X^\top y$ se puede demostrar, pero no es objeto de esta clase (ni curso)]. Solo tendr√≠amos que seguir la expresi√≥n que se obtiene al derivar los estimadores MCO con notaci√≥n matricial, es decir, 
$$
\hat{\beta} = (X^\top X)^{-1} X^\top y
$$
donde nuestra variable dependiente es un vector-columna de $n\times 1$ dimensiones; los par√°metros $\beta$ tambi√©n son un vector columna $k+1\times 1$ dimensiones; las variables independientes son una matriz de $n\times k+1$ dimensiones; y los residuos del modelo son de $n\times 1$ dimensiones. De manera tal que se tiene 
$$
Y_{n\times 1} = \begin{bmatrix}
Y_1 \\
Y_2 \\
\vdots \\
Y_n
\end{bmatrix}, \quad 
X_{n\times (k+1)} =
\begin{bmatrix}
1 & X_{11} & a_{12} & \cdots & a_{1k} \\
1 & X_{21} & a_{22} & \cdots & a_{2k} \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
1 & X_{n1} & a_{n2} & \cdots & a_{nk}
\end{bmatrix},
\quad
\beta_{k+1\times 1} =
\begin{bmatrix}
\beta_0 \\
\beta_1 \\
\vdots \\
\beta_k
\end{bmatrix}, 
\quad
U_{n\times 1} =
\begin{bmatrix}
U_1 \\
U_2 \\
\vdots \\
U_n
\end{bmatrix}
$$

Simulemos, entonces, un caso conocido: la ecuaci√≥n de Mincer. Un ejemplo relativamente b√°sico de esta ser√≠a el siguiente: 
$$
\ln \text{salario}_i = \ln \beta_0 + \beta_1 \text{educ}_i +\beta_2 \text{exp}_i+\beta_3 \text{exp}_i^2+ \beta_4 \text{dummy-mujer}_i + u_i
$$
donde la variable dependiente es salario del individuo $i$, a la cual se le aplica un logaritmo natural; $\beta_0$ es el intercepto (salario de alguien sin educaci√≥n ni experiencia (ni mujer)); $\text{educ}_i$ es la variable que registra los a√±os de escolaridad del individuo $i$; $\text{exp}_i$ es la variable que contiene la experiencia laboral del individuo $i$; $\text{dummy-mujer}_i$ es una variable que identifica si $i$ es mujer o no; y $u_i$ es el t√©rmino de error. Veamos c√≥mo podr√≠amos hacer esto en R con una simulaci√≥n: 


```{r MCO-matrices, collapse=TRUE}
#| label: MCO-matricial

# MCO "a mano" (solo betas) + comparaci√≥n con lm()
set.seed(2025)

# 1) Simulaci√≥n tipo Mincer
n <- 1000
esc   <- pmax(0, round(rnorm(n, 12, 2)))
exp   <- pmax(0, round(rnorm(n, 15, 5)))
mujer <- rbinom(n, 1, 0.45)

b0 <- 1.5; b_esc <- 0.08; b_exp <- 0.10; b_exp2 <- -0.002; b_muj <- -0.20
eps <- rnorm(n, 0, 0.30)
y <- b0 + b_esc*esc + b_exp*exp + b_exp2*(exp^2) + b_muj*mujer + eps  # log ingreso

# 2) Matriz de dise√±o y vector
X <- cbind(1, esc, exp, exp^2, mujer) # Matriz X
colnames(X) <- c("(Intercept)", "esc", "exp", "exp2", "mujer")

# 3) Betas por √°lgebra matricial:  Œ≤ÃÇ = (X'X)^(-1) X'y
beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% y) 

# 4) Comparaci√≥n con lm()
beta_lm <- coef(lm(y ~ esc + exp + I(exp^2) + mujer))

# 5) Mostrar lado a lado
out <- cbind(beta_manual = as.numeric(beta_hat), beta_lm = as.numeric(beta_lm))
rownames(out) <- colnames(X)
round(out, 6)


```


### Tipos de datos

No obstante, para todo ello, ¬°hay que aprender R! Probablemente muchxs de ustedes ya saben algo de R. A su vez, si saben R pero no como derivar MCO no se preocupen, no es necesario saber esto para hacer una regresi√≥n en R. Es m√°s, como vieron, `lm()` que es la funci√≥n m√°s b√°sica para realizar regresiones lineales en R realiza la operaci√≥n matricial que hicimos en una sola l√≠nea de c√≥digo (`lm(y ~ esc + exp + I(exp^2) + mujer)`). Todo lo anterior, por tanto, fueron ejemplos de cosas que se pueden hacer en R, utiliz√°ndolo m√°s "en bruto" y para que puedan visualizar su potencial. 

Pero volvamos a R. Los objetos de R tienen distintas "clases". Para efectos del curso, podemos pensar esto como la naturaleza de variables, i.e., como variables cuantitativas (discretas y continuas) y cualitativas (ordinales y nominales). Los objetos de R tienen categor√≠as similares. Pero tambi√©n tienen combinaciones, como los objetos `dbl+lbl`, que son num√©ricos y con etiquetas. Adicionalmente, tambi√©n podemos encontrar datos de tipo l√≥gico (`TRUE` y `FALSE`). 

```{r, collapse=TRUE}
#| label: tipos-datos

# Num√©rico
numero <- 42
class(numero)

# Car√°cter (texto)
nombre <- "Mar√≠a"
class(nombre)

# L√≥gico
es_estudiante <- TRUE
class(es_estudiante)

# Factor (categor√≠as)
nivel_educacion <- factor(c("B√°sica", "Media", "Superior", "Media"))
nivel_educacion
```

---

## 3. Trabajar con DataFrames

Los **dataframes** son tablas de datos, similares a hojas de Excel. Cada columna es una variable, cada fila es una observaci√≥n. Es en este formato en el que trabajaremos con bases de datos reales. 

### Crear un dataframe

```{r}
#| label: crear-dataframe

# Crear un dataframe desde vectores
estudiantes <- data.frame(
  nombre = c("Ana", "Bruno", "Carla", "Diego", "Elena"),
  edad = c(23, 25, 24, 26, 23),
  carrera = c("Sociolog√≠a", "Sociolog√≠a", "Antropolog√≠a", 
              "Sociolog√≠a", "Antropolog√≠a"),
  nota = c(6.5, 5.8, 6.9, 6.2, 7.0)
)

# Ver el dataframe
estudiantes
```

Pero partamos inmediatamente con bases de datos reales. Tomemos la Encuesta Nacional de Empleo, realizada por el INE mes a mes y que agrupa datos trimestrales. Para ello, utilizaremos la funci√≥n `read.csv()`, del paquete `utils`, pues las bases de datos vienen en formato `.csv`. Una vez que cargamos los datos, exploraremos nuestra base de datos. No obstante, conviene saber antes que los archivos `.csv` son archivos de texto, que generalmente hay que especificar el delimitador que usa para separar las columnas (`;` o `,` com√∫nmente). 

```{r}
#| label: cargar-ene

datos <- read.csv("data-sesiones/ene-2025-07-jja.csv", # Ruta
                  sep=",", # Delimitador
                  encoding = "UTF-8" # UTF-8 o Latin-1
                  )

head(datos) # UPS

datos <- read.csv("data-sesiones/ene-2025-07-jja.csv", # Ruta
                  sep=";", # Delimitador
                  encoding = "Latin-1", # UTF-8 o Latin-1
                  stringsAsFactors = F # character to factor
                  ) 

head(datos) # :D
```




### Explorar datos

```{r , collapse=TRUE}
#| label: explorar-datos

# Estructura del dataframe
str(datos)

# Estructura con glimpse
glimpse(datos)

# Dimensiones (filas x columnas)
dim(datos)


```

### Explorar variables

En el formato `data.frame`, las columnas son las variables y las filas son las observaciones, i.e., la informaci√≥n de cada persona encuestada para cada variable (columna). En este sentido, a trav√©s de la fila vemos lo que respondi√≥ cada informante en las preguntas que se les realiz√≥ en la determinada encuesta (o en las variables derivadas del cuestionario). Por ello, conviene revisar los manuales metodol√≥gicos, los libros de c√≥digos, los cuestionarios, etc., de la encuesta que estemos usando. Para nuestro caso, revisando el [Libro de C√≥digos de la ENE](https://www.ine.gob.cl/docs/default-source/ocupacion-y-desocupacion/metadatos/2020/encuesta-nacional-de-empleo---a√±o-de-referencia-2020.pdf?sfvrsn=bc1fb0e6_8), podr√≠amos revisar las siguientes variables:

```{r , collapse=TRUE}
#| label: acceder-variables

# Acceder a una columna espec√≠fica con $
estudiantes$edad

# Otra forma: usando corchetes
estudiantes[, "edad"]


# Ahora con funciones de R y variables de la ENE 
# Condici√≥n de actividad (Ocupados (1), Desocupado (2) y Fuerza de la FDT (3))
frq(datos$activ) # Proporci√≥n de activ

# Clasificaci√≥n Internacional de Nivel Educacional (CINE) 1997
frq(datos$cine97) # Proporci√≥n CINE 97

# Condici√≥n de actividad econ√≥mica general
## Ver categorias en documento
frq(datos$cae_general)
```

::: {.callout-tip}
## Tip: Rutas relativas
Usa rutas relativas desde tu archivo .R:
- `../data/archivo.csv` (sube una carpeta, entra a data)
- Nunca uses `C:/Mi Computador/...` (no funcionar√° en otros computadores)
:::

Obviamente, como son muy astutxs, ya se estar√°n preguntando si se pueden hacer an√°lisis m√°s refinados. Ciertamente s√≠, y eso iremos viendo a lo largo del curso y tambi√©n en esta sesi√≥n. Pero por poner un ejemplo, la ENE se utiliza para para calcular indicadores como la tasa de ocupaci√≥n, desempleo, de participaci√≥n, de ocupaci√≥n informal, etc. Aunque a√∫n no veremos c√≥mo hacerlo estimando nuestra muestra a nivel poblacional (con muestras complejas (`survey` y `srvyr`)).

La ENE calcula la tasa de ocupaci√≥n como 
$$
\text{Tasa de ocupacion} = \frac{\text{Ocupados/as}}{\text{Poblacion en edad de trabajar}} \times 100
$$
Como ya les parecer√° obvio por su astucia, vimos una variable que nos permitir√≠a c√≥mo calcular esto: `activ`. Dado que `1. Ocupados/as`, entonces, solo habr√≠a que

```{r , collapse=TRUE}
#| label: tasa-ocupacion

## Tasa de ocupaci√≥n muestral (sin survey)
## Requiere en 'datos' las variables: activ (1=ocupado, 2/3=no (o sea PET)) y edad

# 1) Variables auxiliares equivalentes a Stata
datos$oc    <- ifelse(datos$activ == 1, 1, 0)        # ocupado
datos$may15 <- ifelse(datos$edad  >= 15, 1, 0)       # PET potencial (15+)

# 2) Tasa de ocupaci√≥n (toc)
datos$toc <- ifelse(datos$may15 == 1, datos$oc, NA_real_)

# 3) Estimaci√≥n muestral de la tasa de ocupaci√≥n (subpoblaci√≥n edad>=15)
numerador   <- sum(datos$oc  [datos$may15 == 1 & !is.na(datos$activ)], na.rm = TRUE)
denominador <- sum(          datos$may15 == 1 & !is.na(datos$activ))
toc_muestra <- numerador / denominador

toc_muestra                    # proporci√≥n
toc_muestra * 100              # porcentaje


```

Esto significar√≠a que, a nivel muestral, la tasa de ocupaci√≥n es del 51,36%. Pero, antes de pasar un procesamiento m√°s refinado de los datos, para justamente obtener indicadores y an√°lisis estad√≠sticos mejores, hay que mencionar que el c√≥digo anterior podr√≠a estar mucho m√°s optimizado. ¬øC√≥mo? Con nuestro nuevo amigo que nos acompa√±ar√° todo el curso: `dplyr`, paquete dentro de `tidyverse`. Con √©l, y sus funciones, podremos calcular la tasa de ocupaci√≥n (muestral) con una l√≠nea de c√≥digo concateando procesos con `|>` (o `%>%` que viene en `magritrr`, tambi√©n paquete incluido en `tidyverse`): 

```{r, collapse=TRUE}
#| label: tasa-ocup-dplyr

toc_muestra <- datos |>
  mutate(oc = activ == 1, # Creamos ocupado (oc) y mayores de 15 (may15)
         may15 = edad >= 15) |>  
  filter(may15, !is.na(activ)) |>  # Filtramos mayores de 15 y sin NA en activ
  summarise(toc = mean(oc)) |> # Calculamos promedio de ocupados
  pull(toc)   # Extraemos el valor num√©rico

toc_muestra          # Proporci√≥n
toc_muestra * 100    # Porcentaje


```




## 4. Estad√≠stica Descriptiva y an√°lisis exploratorio (I)

Antes de avanzar 


La estad√≠stica descriptiva resume y organiza datos. Comenzaremos con **medidas de tendencia central**.

```{r}
#| label: borrar-esto
# Simular datos de encuesta
set.seed(123)  # Para reproducibilidad

encuesta <- data.frame(
  id = 1:100,
  edad = sample(18:65, 100, replace = TRUE),
  sexo = sample(c("Mujer", "Hombre", "Otro"), 100, 
                replace = TRUE, prob = c(0.5, 0.48, 0.02)),
  educacion = sample(c("B√°sica", "Media", "T√©cnica", "Universitaria", "Postgrado"), 
                     100, replace = TRUE),
  satisfaccion = sample(1:7, 100, replace = TRUE),
  ingreso = rnorm(100, mean = 800000, sd = 300000)
)

# Vista previa
head(encuesta, 10)
```


### Medidas de tendencia central

Son valores que representan el "centro" de los datos:

::: {.callout-note}
## Definiciones

- **Media (promedio)**: Suma de valores / cantidad de valores
- **Mediana**: Valor que divide los datos en dos mitades iguales
- **Moda**: Valor m√°s frecuente
:::

```{r}
#| label: tendencia-central

# Media
mean(encuesta$edad)

# Mediana
median(encuesta$edad)

# Para variables categ√≥ricas: tabla de frecuencias
table(encuesta$educacion)

# Moda (el valor m√°s frecuente)
# R no tiene funci√≥n directa, usamos table
tabla_educacion <- table(encuesta$educacion)
names(tabla_educacion)[which.max(tabla_educacion)]
```

### Comparaci√≥n media vs mediana

```{r}
#| label: fig-media-mediana
#| fig-cap: "Distribuci√≥n de ingresos con media y mediana"
#| fig-width: 8
#| fig-height: 5

# Crear histograma con media y mediana
ggplot(encuesta, aes(x = ingreso)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
  geom_vline(aes(xintercept = mean(ingreso), color = "Media"), 
             linewidth = 1.2, linetype = "dashed") +
  geom_vline(aes(xintercept = median(ingreso), color = "Mediana"), 
             linewidth = 1.2, linetype = "dashed") +
  scale_color_manual(name = "", 
                     values = c("Media" = "red", "Mediana" = "blue")) +
  theme_minimal() +
  labs(title = "Distribuci√≥n de Ingresos",
       x = "Ingreso (CLP)",
       y = "Frecuencia") +
  scale_x_continuous(labels = scales::comma)
```

**Interpretaci√≥n:** La media es sensible a valores extremos, mientras que la mediana es m√°s robusta.

---

## 6. Tablas de frecuencia

Las tablas de frecuencia organizan datos categ√≥ricos contando cu√°ntas veces aparece cada valor.

### Tabla de frecuencia simple

```{r}
#| label: tabla-simple

# Frecuencias absolutas
table(encuesta$sexo)

# Frecuencias relativas (proporciones)
prop.table(table(encuesta$sexo))

# Frecuencias relativas en porcentaje
prop.table(table(encuesta$sexo)) * 100
```

### Tabla m√°s elaborada

```{r}
#| label: tabla-elaborada

# Crear tabla con frecuencias y porcentajes
tabla_sexo <- as.data.frame(table(encuesta$sexo))
colnames(tabla_sexo) <- c("Sexo", "Frecuencia")
tabla_sexo$Porcentaje <- round(prop.table(tabla_sexo$Frecuencia) * 100, 1)

# Mostrar con kable
library(knitr)
kable(tabla_sexo, caption = "Distribuci√≥n por sexo")
```

### Tabla de contingencia (dos variables)

Las tablas de contingencia cruzan dos variables categ√≥ricas:

```{r}
#| label: tabla-contingencia

# Tabla de contingencia: sexo x educaci√≥n
tabla_cruzada <- table(encuesta$sexo, encuesta$educacion)
tabla_cruzada

# Agregar totales marginales
addmargins(tabla_cruzada)
```

### Proporciones por fila o columna

```{r}
#| label: proporciones-tabla

# Proporciones por fila (cada fila suma 100%)
prop.table(tabla_cruzada, margin = 1) * 100

# Proporciones por columna (cada columna suma 100%)
prop.table(tabla_cruzada, margin = 2) * 100
```

---

## 7. Visualizaci√≥n de frecuencias

### Gr√°fico de barras

```{r}
#| label: fig-barras
#| fig-cap: "Distribuci√≥n de nivel educacional"
#| fig-width: 8
#| fig-height: 5

ggplot(encuesta, aes(x = educacion)) +
  geom_bar(fill = "steelblue", alpha = 0.8) +
  theme_minimal() +
  labs(title = "Distribuci√≥n de Nivel Educacional",
       x = "Nivel Educacional",
       y = "Frecuencia") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Gr√°fico de barras agrupadas

```{r}
#| label: fig-barras-agrupadas
#| fig-cap: "Nivel educacional por sexo"
#| fig-width: 10
#| fig-height: 6

ggplot(encuesta, aes(x = educacion, fill = sexo)) +
  geom_bar(position = "dodge") +
  theme_minimal() +
  labs(title = "Nivel Educacional por Sexo",
       x = "Nivel Educacional",
       y = "Frecuencia",
       fill = "Sexo") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

---

## 8. Ejercicios pr√°cticos

::: {.callout-tip}
## Ejercicio 1: Calcular estad√≠sticos

Usando los datos de `encuesta`:

a) Calcula la edad promedio
b) Calcula la edad mediana
c) ¬øCu√°l es la satisfacci√≥n promedio?
d) ¬øCu√°l es el ingreso mediano?

**Pista:** Usa las funciones `mean()` y `median()`
:::

```{r}
#| label: ejercicio-1
#| eval: false
#| code-fold: true

# Tu c√≥digo aqu√≠

```

::: {.callout-tip collapse="true"}
## Soluci√≥n Ejercicio 1

```{r}
#| label: solucion-1

# a) Edad promedio
mean(encuesta$edad)

# b) Edad mediana
median(encuesta$edad)

# c) Satisfacci√≥n promedio
mean(encuesta$satisfaccion)

# d) Ingreso mediano
median(encuesta$ingreso)
```
:::

---

::: {.callout-tip}
## Ejercicio 2: Tablas de frecuencia

Crea una tabla de frecuencias para la variable `educacion` que incluya:
- Frecuencia absoluta
- Frecuencia relativa (porcentaje)

**Pista:** Usa `table()` y `prop.table()`
:::

```{r}
#| label: ejercicio-2
#| eval: false
#| code-fold: true

# Tu c√≥digo aqu√≠

```

::: {.callout-tip collapse="true"}
## Soluci√≥n Ejercicio 2

```{r}
#| label: solucion-2

# Crear tabla
tabla_educ <- as.data.frame(table(encuesta$educacion))
colnames(tabla_educ) <- c("Nivel", "Frecuencia")
tabla_educ$Porcentaje <- round(prop.table(tabla_educ$Frecuencia) * 100, 1)

# Mostrar
kable(tabla_educ)
```
:::

---

::: {.callout-tip}
## Ejercicio 3: Tabla de contingencia

Crea una tabla de contingencia entre `sexo` y `educacion`.
Luego calcula las proporciones por fila.

¬øQu√© porcentaje de mujeres tiene educaci√≥n universitaria?
:::

```{r}
#| label: ejercicio-3
#| eval: false
#| code-fold: true

# Tu c√≥digo aqu√≠

```

::: {.callout-tip collapse="true"}
## Soluci√≥n Ejercicio 3

```{r}
#| label: solucion-3

# Tabla de contingencia
tabla <- table(encuesta$sexo, encuesta$educacion)
tabla

# Proporciones por fila
prop_fila <- prop.table(tabla, margin = 1) * 100
round(prop_fila, 1)

# El porcentaje de mujeres con educaci√≥n universitaria es:
prop_fila["Mujer", "Universitaria"]
```
:::

---

## Resumen

En esta sesi√≥n aprendimos:

- ‚úÖ Navegar en RStudio y crear scripts
- ‚úÖ Crear y manipular objetos b√°sicos (vectores, dataframes)
- ‚úÖ Importar datos desde CSV
- ‚úÖ Calcular medidas de tendencia central (media, mediana, moda)
- ‚úÖ Crear tablas de frecuencia simples y de contingencia
- ‚úÖ Visualizar datos con gr√°ficos de barras

---

## Recursos adicionales

### Lecturas recomendadas

- Navarro, D. (2015). *Learning Statistics with R*. Cap√≠tulos 3-5. [Disponible online](https://learningstatisticswithr.com/)
- Wickham, H., & Grolemund, G. (2017). *R for Data Science*. Cap√≠tulos 1-4. [Disponible online](https://r4ds.had.co.nz/)

### Videos

- [Introducci√≥n a RStudio (10 min)](https://www.youtube.com/watch?v=lVKMsaWju8w)
- [R para principiantes](https://www.youtube.com/watch?v=_V8eKsto3Ug)

### Pr√°ctica adicional

- [Swirl - Learn R, in R](https://swirlstats.com/) - Tutorial interactivo
- [R for Data Science - Ejercicios](https://r4ds.hadley.nz/data-transform.html#exercises-9)

---

## Para la pr√≥xima sesi√≥n

::: {.callout-important}
## Tareas

1. Completar los 3 ejercicios de esta sesi√≥n
2. Instalar el paquete `psych`: `install.packages("psych")`
3. Traer un dataset propio (opcional) o trabajaremos con datos de ejemplo
4. Leer: Navarro, Cap√≠tulo 5 (Medidas de dispersi√≥n)
:::

::: {.callout-note}
## Recordatorio

La entrega de ejercicios es el [fecha]. Formato: archivo `.qmd` + HTML renderizado.
:::
